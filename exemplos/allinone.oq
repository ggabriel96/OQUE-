fn main(){
    let i = (3 + 4) - (5 * 2) + 1: int
    let j = 2 : double
    let x, vet: int
    let str: string

    repetix(i < (j + 4-1)){
        println(Meu i esta valendo $i-1$ somado ao literal '1'.)

        if (i == j/2.0){
            println (>>> O valor da var i corresponde a metade do valor da var j.)
        }
        elsif ( i == j ){
            println (>>> As variaveis i e j sao iguais.)
        }
        else{
            println (>>> Nada incomum.)
        }
        i = i + 1
    }

    print (\nInsira um valor inteiro arbitrario: )
    scan (x)
    x = sqr(x)
    println (O quadrado do valor inserido eh $x$)

    print (\nO resultado eh: $conta(j,x)$\n\n)

    print ($tela()$ na tela.\n)



    --Exemplo de utilização de vetores
    vet[2] = 12345
    vet[3] = 54321

    --println (\nPosicao 1 do vetor: $z[1]$) // Gera erro e descreve onde
    println (\nPosicao 2 do vetor: $z[2*2+7-9]$)
    println (\nPosicao 3 do vetor: $z[3]$)


    --Exemplo de utilização de structs
    str[1] = 1
    str[nome] = OQUE/QUETEM
    --println (Gera erro pois não existe [telefone]: $str[telefone]$)
    println (O nome eh: $str[nome]$)
    println (O campo 1 eh: $str[1+1-1]$)

}

--Função com um parêmtro e retorno:
fn sqr(param){
    return param * param
}

--Função com múltiplos parâmetros e retorno:
fn conta(par1, par2){
    return (par1 + par2) * par1 -+(-5*5) --Expressões com múltiplas variáveis e parâmetros
}

--Função sem atribuição e sem retorno
fn tela(){
    print(>>>Printando...<<<)
}
